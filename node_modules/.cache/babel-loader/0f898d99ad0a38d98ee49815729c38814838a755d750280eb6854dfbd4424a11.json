{"ast":null,"code":"// Import the axios library for making HTTP requests\nimport axios from 'axios';\n\n// Define an asynchronous function to get a message from the AI backend\nexport const getAIMessage = async userQuery => {\n  try {\n    // Make a POST request to the backend server with the user query\n    const response = await axios.post('http://localhost:5001/query', {\n      query: userQuery\n    });\n\n    // Assuming the backend returns an object with a \"message\" property,\n    // create an object to represent the assistant's response\n    const message = {\n      role: \"assistant\",\n      content: response.data.message\n    };\n\n    // Return the assistant's message\n    return message;\n  } catch (error) {\n    // Log the error to the console for debugging\n    console.error(\"Error fetching AI message: \", error.response ? error.response.data : error.message);\n\n    // Return an error message if the request fails\n    return {\n      role: \"assistant\",\n      content: \"Sorry, something went awry. Please try again.\"\n    };\n  }\n};","map":{"version":3,"names":["axios","getAIMessage","userQuery","response","post","query","message","role","content","data","error","console"],"sources":["/Users/munenekariuki/Downloads/GitHub/instalily-case-study/src/api/api.js"],"sourcesContent":["// Import the axios library for making HTTP requests\nimport axios from 'axios';\n\n// Define an asynchronous function to get a message from the AI backend\nexport const getAIMessage = async (userQuery) => {\n  try {\n    // Make a POST request to the backend server with the user query\n    const response = await axios.post('http://localhost:5001/query', { query: userQuery });\n\n    // Assuming the backend returns an object with a \"message\" property,\n    // create an object to represent the assistant's response\n    const message = {\n      role: \"assistant\",\n      content: response.data.message\n    };\n\n    // Return the assistant's message\n    return message;\n    \n  } catch (error) {\n    // Log the error to the console for debugging\n    console.error(\"Error fetching AI message: \", error.response ? error.response.data : error.message);\n\n    // Return an error message if the request fails\n    return {\n      role: \"assistant\",\n      content: \"Sorry, something went awry. Please try again.\"\n    };\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,6BAA6B,EAAE;MAAEC,KAAK,EAAEH;IAAU,CAAC,CAAC;;IAEtF;IACA;IACA,MAAMI,OAAO,GAAG;MACdC,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAEL,QAAQ,CAACM,IAAI,CAACH;IACzB,CAAC;;IAED;IACA,OAAOA,OAAO;EAEhB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACP,QAAQ,GAAGO,KAAK,CAACP,QAAQ,CAACM,IAAI,GAAGC,KAAK,CAACJ,OAAO,CAAC;;IAElG;IACA,OAAO;MACLC,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}