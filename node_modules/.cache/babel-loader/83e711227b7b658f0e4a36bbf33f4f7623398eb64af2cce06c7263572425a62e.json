{"ast":null,"code":"import axios from 'axios';\nexport const getAIMessage = async userQuery => {\n  try {\n    // Make a POST request to your backend with the user query\n    const response = await axios.post('<http://localhost:5001/query>', {\n      query: userQuery\n    });\n\n    // Assuming the backend returns an object with a \"message\" property\n    const message = {\n      role: \"assistant\",\n      content: response.data.message\n    };\n    return message;\n  } catch (error) {\n    console.error(\"Error fetching AI message: \", error);\n    return {\n      role: \"assistant\",\n      content: \"Sorry, something went awry. Please try again.\"\n    };\n  }\n};","map":{"version":3,"names":["axios","getAIMessage","userQuery","response","post","query","message","role","content","data","error","console"],"sources":["/Users/munenekariuki/Downloads/GitHub/instalily-case-study/src/api/api.js"],"sourcesContent":["import axios from 'axios';\n\nexport const getAIMessage = async (userQuery) => {\n  try {\n    // Make a POST request to your backend with the user query\n    const response = await axios.post('<http://localhost:5001/query>', {query: userQuery});\n\n    // Assuming the backend returns an object with a \"message\" property\n    const message = {\n      role: \"assistant\",\n      content: response.data.message\n    };\n\n    return message;\n  } catch (error) {\n    console.error(\"Error fetching AI message: \", error);\n    return {\n      role: \"assistant\",\n      content: \"Sorry, something went awry. Please try again.\"\n    };\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,IAAI,CAAC,+BAA+B,EAAE;MAACC,KAAK,EAAEH;IAAS,CAAC,CAAC;;IAEtF;IACA,MAAMI,OAAO,GAAG;MACdC,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAEL,QAAQ,CAACM,IAAI,CAACH;IACzB,CAAC;IAED,OAAOA,OAAO;EAChB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO;MACLH,IAAI,EAAE,WAAW;MACjBC,OAAO,EAAE;IACX,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}